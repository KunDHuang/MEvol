#!/usr/bin/env python

from Bio.Phylo.PAML import codeml
import pandas as pd
import scipy.stats
import os
import sys
import argparse
import textwrap
import numpy as np
"""
NAME: codeml_acarer.py
DESCRIPTION: codeml_acarer.py (codeml aftermath carer) is a script to parse all information generated by codeml analysis.
AUTHOR: Kun D. Huang
DATE: 10.02.2023
"""


class ATeam:
    """
    ATeam is an object to spit out codeml results in a readable way
    """
    
    def __init__(self, codeml_outfile):
        
        self.codeml_outfile = codeml_outfile
    
    def get_lnL(self, model_idx):
        
        codeml_parse = codeml.read(self.codeml_outfile)
        
        return codeml_parse['NSsites'][model_idx]['lnL']
    
    def get_omega(self, model_idx):

        codeml_parse = codeml.read(self.codeml_outfile)
        
        if model_idx == 0:
            return codeml_parse['NSsites'][model_idx]['parameters']['omega']
        
        elif model_idx == 1:
            
            omega_proportions = codeml_parse['NSsites'][model_idx]['parameters']['site classes']
            
            df = pd.DataFrame([[0, float(omega_proportions[0]['proportion'])], [1, float(omega_proportions[1]['proportion'])]],
                              columns = ['omega', 'proportion'])            
            return df
        
        elif model_idx == 2:
            
            omega_proportions = codeml_parse['NSsites'][model_idx]['parameters']['site classes']
            matrix = [] 
            for c in omega_proportions:
                omega = float(omega_proportions[c]['omega'])
                prop = float(omega_proportions[c]['proportion'])
                matrix.append([omega, prop])
                
            
            df = pd.DataFrame(matrix,
                              columns = ['omega', 'proportion'])
            
            return df
        
    def get_df(self, model_idx):
            
        parsed_codeml = open(self.codeml_outfile).readlines()
        counter = 0
        df_dict = {}
        for df in parsed_codeml:
            if "lnL(ntime:" in df:
                df = df.split(":")[2].replace(")", "").replace(" ", "")        
                df_dict[counter] = int(df)
                counter += 1
                
                
        return df_dict[model_idx] 
        
            
            
    
def chi2_test(lnl_m0, lnl_m1, df_0, df_1):
    chi2 = lnl_m1 - lnl_m0
    df_10 = df_1 - df_0
    sig_level = scipy.stats.chi2.ppf(1-.05, df = df_10)
    
    if chi2 > sig_level:
        return 1
    else:
        return 0
    
        

if __name__ == "__main__":
    
    def read_args(args):
    # This function is to parse arguments

        parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                         description = textwrap.dedent('''\
                                         This program is to analyze codeml results.
                                         '''),
                                         epilog = textwrap.dedent('''\
                                         examples:
                                         '''))
        parser.add_argument('--codeml_outfile',
                        nargs = '?',
                        help = '',
                        type = str,
                        default = None)
        
        parser.add_argument('--output',
                        nargs = '?',
                        help = '',
                        type = str,
                        default = None)

        return vars(parser.parse_args())
    
    pars = read_args(sys.argv)
    ATeam_obj = ATeam(pars['codeml_outfile'])
    
    df_0 = ATeam_obj.get_df(0)
    df_1 = ATeam_obj.get_df(1)
    df_2 = ATeam_obj.get_df(2)
    lnl_0 = ATeam_obj.get_lnL(0)
    lnl_1 = ATeam_obj.get_lnL(1)
    lnl_2 = ATeam_obj.get_lnL(2)
    
    M01_chi2 = chi2_test(lnl_0, lnl_1, df_0, df_1)
    M12_chi2 = chi2_test(lnl_1, lnl_2, df_1, df_2)
    
    M0_omega = ATeam_obj.get_omega(0)
    M1_omega = ATeam_obj.get_omega(1)
    M2_omega = ATeam_obj.get_omega(2)
    
    M0_df = pd.DataFrame([['M0', M0_omega, np.nan, np.nan]], columns = ['model', 'omega', 'proportion', 'chi2_sig'])
    M1_omega.insert(0, 'model', ['M01', 'M01'])
    M1_omega['chi2_sig'] = [M01_chi2, M01_chi2]
    M2_omega.insert(0, 'model', ['M12', 'M12', 'M12'])
    M2_omega['chi2_sig'] = [M12_chi2, M12_chi2, M12_chi2]
    
    M_df = pd.concat([M0_df, M1_omega, M2_omega])
    M_df.to_csv(pars['output'], sep = '\t', index = False)
    
































