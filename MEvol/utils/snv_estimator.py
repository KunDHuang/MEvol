#!/usr/bin/env python

import pandas as pd
from Bio import SeqIO
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord
import os
import subprocess
import argparse
import textwrap
import sys
import numpy as np
import itertools


"""
NAME: snv_estimator.py is a python scripy, optionally being used as a package, is to estimate the pairwise SNV rates for a FASTA file.
"""


def calc_snv_per_pair(args):
    # this function is to calculate the SNV rate between two aligned sequences 
    identifier, seq1_header, seq2_header, seq1, seq2 = args

    snv = 0
    non_gap_len = 0
    gap_len = 0
    for i in range(len(seq1)):
        
        SEQ1 = seq1[i].upper()
        SEQ2 = seq2[i].upper()

        if (SEQ1 != '-') and (SEQ2 != '-'):
            non_gap_len += 1
            if SEQ1 != SEQ2:
                snv += 1
            else:
                snv += 0
        else:
            gap_len += 1
    
    if non_gap_len != 0:
        snv_rate = float(snv/non_gap_len)
    else:
        sys.stdout.write('There are too many gaps between {} and {}, hence we assign NAN.\n'.format(seq1_header, seq2_header))
        snv_rate = np.nan

    gap_ratio = float(gap_len/len(seq1))        


    return [identifier, seq1_header, seq2_header, snv_rate, snv, gap_ratio]

def calc_snv_all_pairs(aln_fasta):
    # aln_fasta: An aligned fasta file.
    fasta_dict = SeqIO.to_dict(SeqIO.parse(aln_fasta, 'fasta'))
    pairs = itertools.combinations(fasta_dict, 2)
    identifier = os.path.basename(aln_fasta)
    identifier = os.path.splitext(identifier)[0] # identifier is generated by drop the suffix of the input fasta file.
    for pair in pairs:
        seq1_header, seq2_header = pair
        seq1 = fasta_dict[seq1_header].seq
        seq2 = fasta_dict[seq2_header].seq
        packed_args = [identifier, seq1_header, seq2_header, seq1, seq2]
        snv_est = calc_snv_per_pair(packed_args)
        yield snv_est
        
def add_metadata(args):
    snv_generator, md_df, entry_id = args
    # snv_generator: the generator which stores SNV information
    # md_df: the metadata of genomes
    # This function is to append metadata to the pairwise SNV rates
    cols = md_df.columns.to_list()
    cols.remove(entry_id)
    for entry in snv_generator:
        seq1 = entry[1]
        seq2 = entry[2]
        packed_args = [[md_df, col, entry_id, seq1, seq2] for col in cols]
        mds = map(fetch_md, packed_args)         
        yield itertools.chain(entry, mds)
                  
def fetch_md(args):
    md_df, col_name, entry_id, seq1, seq2 = args
    seq1_md = md_df.loc[md_df[entry_id] == seq1, col_name].iloc[0]
    seq2_md = md_df.loc[md_df[entry_id] == seq2, col_name].iloc[0]
    if pd.api.types.is_float_dtype(md_df[col_name]) or pd.api.types.is_integer_dtype(md_df[col_name]):
        seq1_seq2_pair = seq1_md - seq2_md
    else:
        seq1_seq2_pair = str(seq1_md) + "$" + str(seq2_md)
    
    return seq1_seq2_pair
        
                     
if __name__ == "__main__":
    def read_args(args):
    # This function is to parse arguments

        parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                         description = textwrap.dedent('''\
                                         This program is to estimate pairwise SNV rates for a fasta file.
                                         '''),
                                        epilog = textwrap.dedent('''\
                                        examples: snv_estimator.py --fasta yvcJ.fa.aln --opt_tab yvcJ_snvrates.tsv
                                       '''))
        parser.add_argument('--fasta',
                        nargs = '?',
                        help = 'Input the FASTA file which contains aligned multiple sequences.',
                        type = str,
                        default = None)

        parser.add_argument('--metadata',
                        nargs = '?',
                        help = 'Input the metadata you would like to append to the pairwise SNV rates. Note: metadata in character will be combined using $, e.g. Vegan$Omnivore. \
                            metadata in numeric will be presented by difference (seq1 - seq2), e.g. 1.5',
                        type = str,
                        default = None)
                        
        parser.add_argument('--entry_col',
                        nargs = '?',
                        help = 'Specify the column which contains the entries (i.e. FASTA headers). Use this feature only when --metadata option is being used. \
                            The first column will be used as default if this option is not specified.',
                        type = str,
                        default = None)
        
        parser.add_argument('--cols_kept_o_rm',
                            nargs = '?',
                            help = "Input the metadata columns you want to keep (e.g. k,Diet,BMI) or remove (e.g. r,Diet,BMI) from the whole input metadata table. default [None].\
                                Use this feature only when --metadata option is being used.",
                            type = str,
                            default = None)     

        parser.add_argument('--opt_tab',
                        nargs = '?',
                        help = 'Specify the name for the output table for holding pairwise SNV rates.',
                        type = str,
                        default = None)    
        
        return vars(parser.parse_args())    
    
    pars = read_args(sys.argv)
    snv_generator = calc_snv_all_pairs(pars["fasta"])
    def clean_metadata(md_df, keep_o_rm_cols):
        if keep_o_rm_cols:
            flag = pars["cols_kept_o_rm"].split(",")[0]
            cols = pars["cols_kept_o_rm"].split(",")[1:]
            if flag == 'k':
                cols = [md_df.columns[0]] + cols
                md_df = md_df[cols]
            elif flag == 'r':
                md_df = md_df.drop(cols, axis = 1)
            else:
                sys.exit("If you want to keep certain metadata columns, please use the syntaxy: k,column_name1,column_name2,......" + "\n" + 
                         "If you want to remove certain metadata columns, please use the syntaxy: r,column_name1,column_name2,......" + "\n" +
                         "If you want to keep all information from the metadata file, please do not use --cols_kept_o_rm.")
        else:
            md_df = md_df
        
        return md_df
    if pars['metadata']:
        md_df = pd.read_csv(pars['metadata'], sep = "\t", index_col = False)
        md_df = clean_metadata(md_df, pars['cols_kept_o_rm'])
        if pars['entry_col']:
            e_id = pars['entry_col']
        else:
            e_id = list(md_df.columns)[0]
        
        opt_df = pd.DataFrame(add_metadata([snv_generator, md_df, e_id]), 
                              columns = ["entry_id", "seq1", "seq2", "snv_rate", "snv_number", "gap_ratio"] + list(md_df.columns)[1:])
    else:
        opt_df = pd.DataFrame(snv_generator, columns = ["entry_id", "seq1", "seq2", "snv_rate", "snv_number", "gap_ratio"])
    
    opt_file = os.path.abspath(pars["opt_tab"])    
    opt_df.to_csv(opt_file, sep = "\t", index = False)
    