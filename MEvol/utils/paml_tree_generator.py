#!/usr/bin/env python

from ete3 import Tree
import math
from Bio.SeqRecord import SeqRecord
from Bio.Seq import Seq
import sys
import subprocess
import argparse
import textwrap


def paml_msa_parser(paml_list):
    # paml_lst: the multiple sequence alignment which has been converted into a list
    # This function is to parse a PAML file into a SeqRecord structure.
    
    seq_nr, seq_len = [i for i in paml_list[0].split(" ") if len(i) > 0] # obtain the number of sequences and the length of each sequence from PAML file.
    seq_nr = int(seq_nr)
    seq_len = float(seq_len)
    
    paml_list = paml_list[1:] # one sequence is splited into 60nt-length fragments and saved as independent elements in a list
    step = math.ceil(seq_len/60) + 1 # calculate the lenth of a sequence block
    chunks = [paml_list[x: x + step] for x in range(0, len(paml_list), step)]
    seqrecords = []
    for chunk in chunks:
        seqrecords.append(SeqRecord(seq = Seq("".join(chunk[1:])),
                                    id = chunk[0],
                                    name = chunk[0],
                                    description = chunk[0]))
    
    return seqrecords
        

def relabel_tree(paml_lst, best_tree, opt_tree):
    # paml_lst: a list containing a PAML file which has been splitted by newlines and read into a list.
    # best_tree: the best tree file generated by RAxML 
    
    tree_leafs = [seq_rec.id for seq_rec in paml_msa_parser(paml_lst)] # obtain the original leaf labels following the sequence order of the PAML file.
    tree_leaf_numbers = {leaf: tree_leafs.index(leaf) + 1 for leaf in tree_leafs} # create a dictionary which map leaf labels to their order position in the PAML file.
    
    core_tree = Tree(open(best_tree).read().rstrip(), format = 0)
    for node in core_tree.traverse("postorder"):
        if node.name in tree_leaf_numbers:
            node.name = tree_leaf_numbers[node.name]

    core_tree.write(format = 9, outfile = opt_tree)
    
    return opt_tree




if __name__ == "__main__":
    def read_args(args):
    # This function is to parse arguments
        parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                         description = textwrap.dedent('''\
                                         This program is to generate a PAML tree given a PAML MSA file and RAxML best tree.
                                         '''),
                                        epilog = textwrap.dedent('''\
                                        examples: paml_tree_generator.py --paml_msa dusC.paml --raxml_btree RAxML_bestTree.Anaerobutyricum_hallii --paml_tree_opt dusC.tre
                                       '''))
        parser.add_argument('--paml_msa',
                        nargs = '?',
                        help = 'Input a PAML file which contains aligned multiple sequences.',
                        type = str,
                        default = None)

        parser.add_argument('--raxml_btree',
                        nargs = '?',
                        help = 'Input a best tree file generated by RAxML',
                        type = str,
                        default = None)

        parser.add_argument('--paml_tree_opt',
                        nargs = '?',
                        help = 'Specify the name of the output PAML tree.',
                        type = str,
                        default = None)
        
        return vars(parser.parse_args())

    pars = read_args(sys.argv)
    paml_list = open(pars['paml_msa']).read().rstrip().split("\n")
    relabel_tree(paml_list, pars["raxml_btree"], pars["paml_tree_opt"])
