#!/usr/bin/env python

import subprocess
import os
import sys
import argparse
import textwrap
from utils.fasta2paml import paml_structure
from utils.original_name_finder import create_folder
from utils.paml_tree_generator import relabel_tree
from utils.codeml_fline import append_mevol_ctl
import tempfile
from subprocess import Popen, PIPE
import time
import multiprocessing as mp

"""
NAME: gene_omega_estimator.py
DESCRIPTION: gene_omega_estimator.py is a python script to estimate dN/dS ratio for a gene to understand the selective strength excerted on this gene.
AUTHOR: Kun D. Huang
Date: 08.02.2023
"""


def generate_paml_msa(fst_lst, opt_dir):
    # fst_lst: a list of fasta MSA files to be converted to paml MSA files.
    # paml_dir: a tmp dir to hold converted PAML files.
    # this function is to pre-convert fasta files into paml files.
    paml_lst = []
    paml_dir = tempfile.mkdtemp(dir = create_folder(opt_dir))
    for fst in fst_lst:
        fst = os.path.abspath(fst)
        head, tail = os.path.split(fst)
        paml_opt = paml_dir + "/" + tail.split(".")[0] + '.paml'
        paml_lst.append(paml_opt)
        paml_str = paml_structure(fst)
        paml_msa = open(paml_opt, 'w')
        paml_msa.write(paml_str)
        paml_msa.close()
    
    return paml_lst


def generate_paml_tree(paml_msa, raxml_btree, opt_dir):
    # paml_msa: The paml msa file.
    # raxml_btree: the best tree generated by RAxML
    # this function is to convert a RAxML best tree into PAML tree, so that codeml can work on it.
    opt_dir = create_folder(opt_dir)
    paml_tree = opt_dir + "/" + "paml.tre"
    paml_elements = open(paml_msa).read().rstrip().split("\n")
    relabel_tree(paml_elements, raxml_btree, paml_tree)

    return paml_tree

def codeml_fline(args):
    paml_msa, paml_tree, opt_dir, appendix = args
    opt_dir = create_folder(opt_dir)
    mevol_ctl, ctl_opt = append_mevol_ctl(paml_msa, paml_tree, opt_dir, appendix)
    ctl_opt = os.path.abspath(ctl_opt)
    opt_ctl_file = open(ctl_opt, 'w')
    for i in mevol_ctl:
        opt_ctl_file.write("{} = {}\n".format(i[0], i[1]))
    
    ctl_opt = os.path.basename(ctl_opt)
    
    return ctl_opt, opt_dir
    

def run_cmd(args):
    ctl_opt, opt_dir = args
    puppeteer = os.path.dirname(os.path.abspath(__file__)) + "/utils/codeml_puppeteer.py"
    cmd = "{} --puppet_clt {} --working_dir {}".format(puppeteer, ctl_opt, opt_dir)
    subprocess.call(cmd, shell = True)   
    
    return

def run_cmd_nproc(ctl_lst, opt_dir_list, nproc = 1):
    
    pool = mp.Pool(processes = nproc)
    packed_args = [(ctl_lst[i], opt_dir_list[i]) for i in range(len(ctl_lst))]
    pool.map(run_cmd, packed_args)
    
    return


if __name__ == "__main__":
    
    def read_args(args):
    # This function is to parse arguments

        parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                         description = textwrap.dedent('''\
                                         This program is to run codeml from python interface.
                                         '''),
                                         epilog = textwrap.dedent('''\
                                         examples: 
                                         '''))
        parser.add_argument('--fasta_folder',
                        nargs = '?',
                        help = 'Specify the folder which contain MSAs in FASTA format.',
                        type = str,
                        default = None)
                
        parser.add_argument('--raxml_btree',
                        nargs = '?',
                        help = 'Input the best tree generated by RAxML.',
                        type = str,
                        default = None)
        
        parser.add_argument('--opt_dir',
                        nargs = '?',
                        help = 'Specify the folder name for saving outputs.',
                        type = str,
                        default = None)
        
        parser.add_argument('--nproc',
                        nargs = '?',
                        help = 'Specify the number of CPUs to use. default: [1]',
                        type = int,
                        default = None)
        
        parser.add_argument('--identifier',
                        nargs = '?',
                        help = 'Specify an identifier to append to outputs. Default: None',
                        type = str,
                        default = None)  
                                
        return vars(parser.parse_args())    
    
    pars = read_args(sys.argv)
    
    fst_lst = subprocess.getoutput("ls {}/*".format(pars['fasta_folder'])).split("\n")
    paml_msas = generate_paml_msa(fst_lst, pars['opt_dir'])
    paml_tre = generate_paml_tree(paml_msas[0], pars['raxml_btree'], pars['opt_dir'])
    codeml_opt_dir = create_folder(create_folder(pars['opt_dir']) + "/codeml_outfiles")
    
    ctl_lst = []
    gene_opt_lst = []
    for paml_msa in paml_msas:
        head, tail = os.path.split(paml_msa)
        gene_opt_dir = codeml_opt_dir + '/' + tail.split(".")[0]
        ctl_opt, gene_opt_dir = codeml_fline([paml_msa, paml_tre, gene_opt_dir, pars['identifier']])
        ctl_lst.append(ctl_opt)
        gene_opt_lst.append(gene_opt_dir)
    run_cmd_nproc(ctl_lst, gene_opt_lst, pars['nproc'])
    
    

